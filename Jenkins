################# Jenkins Installation process ##################
Step 1: Jenkins pre-requiresite is Java installation.[yum install java-17-amazon-corretto -y]/[apt install openjdk-17-jre -y].
Step 2: We can go jenkins webiste to copy the linux commands and execute them.
Step 3: Now ready the jenkins setup.


### What is Jenkins?
Ans.Jenkins is a open-source automation server used for Continuos Integration(CI) & Continuos Delivery/Deployment(CD).
    It automates the process od building, testing and deployment of software applications.

### What are the key features of Jenkins?
Ans.-Easy installation and configuration.
    -Support for a wide range of plugins.
    -Distributed builds.
    -Easy integration with version control system.
    -Pipeline as a code.

### Advantages of CI/CD Pipelines?
Ans.Faster Delivery
    Quick deployments
    Less chances of errors
    Stability
    Reliability
    Quick bug fixes
    Version controlled
    Automations.
    

### What is a Jenkins Pipeline?
Ans.Jenkins pipeline is a set of plugins that allows users to create and integrate continuous delivery (CD) pipelines into Jenkins.

### What is the difference between Declarative and Scripted Pipelines?
Ans.Declarative Pipeline provides a more struched and simpler syntax for defining our pipeline.
    Scripted Pipeline is more flexible and allows for complex scripting using Groovy Language.

### What are plugins in Jenkins?
Ans.Plugins are extensions that add functionalities and capabilities of Jenkins. 
    To make it suitable for all user-specific needs like source code(git), build tools(maven) & testing frameworks.

### What is the CI/CD Pipeline?
Ans.Continuos Integration and Continuos Delivery/Deployment is a process to automate software applications tasks like Build,Test & Deploy.
    -> CI focuses on the automatically testing and integrating code changes.
    -> CD focuses on the complete release process.

### What are build triggers in Jenkins?
Ans.Jenkins build triggers allow for the automation of builds and deployments based on specific events or conditions.
    
### What is the Jenkins Mater-Slave aechitecture?
Ans.In Jnekins, the master node is responsible for managing the build process,
    Slave nodes(agents) are used to execute jobs.

### What is a Jenkins Job?
Ans.Jenkins job is a single task or set of tasks that Jenkins executes.
    Jobs can be configured to perform various actions like building software,running tests or deploying applications.

### What is the role of Jenkinsfile?
Ans.Jenkinsfile is a text file written in "Groovy Syntax" that contains the defination of a Jenkins Pipeline.
    It can be stored in the source code repository,allowing version control of the pipeline configuration.

### What is the purpose of Webhook in Jenkins?
Ans.Webhook is a way for an external system to trigger a jenkins job automstically.
    It sends an HTTP POST request to jenkins when certain events occur, such as push to a version control system.

### What are the stages in the Jenkins pipeline?
Ans.Jenkins pipeline stages represent distinct phases or steps in a software delievery process such as Buid,Test & Deploy.
    Each stage can contain scripted code that performs specific operations.
    The stages are defined in a Jenkinsfile and executed on a Jenkins node. 


###################################### CICD PIPELINE in FULL IMPLEMENTATION ########################################
Pre-Requiresists:-
Install for all tools ubuntu/linux :git,java,maven,jenkins,dokcer,sonarqube,trivy and k8.
---> 1st we can create jenkins job item (git clone)8080
---> 2nd we can create maven configuration (mvn clean compile)
---> 3rd we can install docker we can give permission"(sudo usermod -aG docker jenkins")"restart docker and jenkins."
using docker run a sonarqube tools code quality.default user nd passwd (admin)9000
By using command: "docker run -d -p 9000:9000 sonarqube:lts-community" (at a time create image nd container).
once ready for sonarqube few steps we will follow below:-
click by "MANUALLY" for "asking project" (create a new name project) then do setup.
now go "with jenkins" click github,click next,again,and configures code analysis github.
then go "Administrator" and click "security" then create a "generate token"/name. copy that aadress().
now go with "manage jenkins" create a "credaintals" with sonarqube secret text (). once created.
then go with plugins do install "sonarqube-scanner"
then go tools and add a "SonarQube Scanner installations" create a name "sonar-scanner" and do save.
then go "system" and choose a sonar servers and 
add a "credaintals with sonarqube"(SonarQube)"."asking url","authencation".
now go pipeline and create a stage "sonar analaysis". upper write a "environmemnt{SCANNER_HOME=tool 'sonar-scanner'}."
---> 4th now build a code stage using "mvn clean install"(jar file created)".
---> 5th go with "manage jenkins" do installl "plugin(docker)4in top(commons,pipeline.API,docker."
now gow with tools and chose a add "docker install"
then go with "credaintals" and create a "docker-hub user and passwd details".
now go with pipeline stage "create a docker image".
---> 6th we can push image to docker hub stage pipeline.
---> 7th install minikube and kubectl and give permissions and move on local.
---> 8th we can provide one permission
    sudo chmod 755 /home/ubuntu/.minikube/profiles/minikube/client.key 
(Grants read, write, and execute permissions to the owner and read-execute to others).
---> Check the minikube ip and search for local browser.

+---------------------------------------+
WORKFLOW OF CICD PIPELINE ARCHITECTURE:-
+---------------------------------------+
######################################################################################################################################

GitHub  ---> Code Compile  --->  Code Quality  ---> Code Build  ---> Docker Image  ---> Image scan---> Push to Image  ---> Deploy to K8's
              (Maven)             Analaysis          (Maven)          (Docker)            (Trivy)       (Docker-Hub)       (Kubernetes)
                                 (SonarQube)

######################################################################################################################################
pipeline {
    agent any
    
    environment {
        GIT_REPO = 'https://github.com/manojv238/end-to-end.git'
        DOCKER_IMAGE = 'demoapp'
        DOCKER_TAG = '7'
        DOCKER_REGISTRY = 'manu9121/docker-images'
        SCANNER_HOME = tool 'sonar-scanner'
        KUBECONFIG = '/home/ubuntu/.kube/config'
    }

    stages{
        stage('Git clone') {
            steps {
                git changelog: false, poll: false, url: 'https://github.com/gashok13193/end-to-end.git'
            }
        }
        
        stage('Code compile') {
            steps {
                sh 'mvn clean compile'
            }
        }
        
        stage('SonarQube Analaysis') {
            steps {
                withSonarQubeEnv('SonarQube'){
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=new-project\
                    -Dsonar.java.binaries=.\
                    -Dsonar.projectKey=new-project'''
                }
                    
            }
        }
        
        stage('Code Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        
        stage('Docker Build Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'Docker', toolName: 'Docker'){
                        sh "docker build -t cicd ."
                    } 
                }
            }
        }
        
         stage('Docker Image Push') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'Docker', toolName: 'Docker'){
                        sh "docker tag cicd manu9121/docker-images:$BUILD_ID"
                        sh "docker push manu9121/docker-images:$BUILD_ID"
                    } 
                }
            }

         stage('Trivy scan image') {
            steps {
                sh "trivy image manuimage"
              }
           }
        }
        stage('DEPLOY TO K8S') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubernetes-k8']){
                        sh "kubectl apply -f k8s/deployment.yaml"
                    }
                }
            }
        }
    }
}












