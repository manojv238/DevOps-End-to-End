############################# Terraform real-time commands ####################################
+----------------------------------------------------------------------------+
|  üå± Initialization                                                        |
+----------------------------------------------------------------------------+
| terraform init         # Initialize Terraform in the working directory     |
| terraform validate     # Validate the configuration files                  |
| terraform fmt          # Format the Terraform code                         |
+----------------------------------------------------------------------------+

+----------------------------------------------------------------------------+
|  üöÄ Plan & Apply                                                          |
+----------------------------------------------------------------------------+
| terraform plan         # Show execution plan without applying changes      |
| terraform apply        # Deploy or Apply the Terraform changes             |
| terraform apply -auto-approve  # Apply without confirmation prompt         |
+----------------------------------------------------------------------------+

+----------------------------------------------------------------------------+
|  ‚ùå Destroy Resources                                                     |
+----------------------------------------------------------------------------+
| terraform destroy      # Destroy all resources                             |
| terraform destroy -auto-approve  # Destroy without confirmation            |
+----------------------------------------------------------------------------+

+----------------------------------------------------------------------------+
|  üìÑ State Management                                                       |
+----------------------------------------------------------------------------+
| terraform state list   # List all resources in the state file              |
| terraform state show <resource>  # Show details of a specific resource     |
| terraform refresh      # Sync state file with real-world infrastructure    |
+----------------------------------------------------------------------------+

+----------------------------------------------------------------------------+
|  üéØ Target Resources                                                      |
+----------------------------------------------------------------------------+
| terraform apply -target=<resource>  # Apply changes only to a resource     |
| terraform destroy -target=<resource>  # Destroy only a specific resource   |
+----------------------------------------------------------------------------+

+----------------------------------------------------------------------------+
|  üîç Output & Debugging                                                    |
+----------------------------------------------------------------------------+
| terraform output       # Show output values                                |
| TF_LOG=DEBUG terraform apply  # Enable debugging logs                      |
+----------------------------------------------------------------------------+

+----------------------------------------------------------------------------+
|  üîë Variables Handling                                                    |
+----------------------------------------------------------------------------+
| terraform apply -var="key=value"  # Pass a variable manually               |
| terraform apply -var-file="vars.tfvars"  # Use a variable file             |
+----------------------------------------------------------------------------+

+----------------------------------------------------------------------------+
|  üõ† Modules & Workspaces                                                   |
+----------------------------------------------------------------------------+
| terraform get          # Download required modules                         |
| terraform workspace list  # List all workspaces                            |
| terraform workspace select <name>  # Switch to another workspace           |
+----------------------------------------------------------------------------+

################# Terraform script code examplea ####################
--------------------------------------------------------------------------------------------------------------------------------------
main.tf file
--------------------------------------------------------------------------------------------------------------------------------------
provider "aws" {
  region = "us-east-1"
}

resource "aws_instance" "example" {
    ami = var.ami_value
    instance_type = var.instance_type_value
    subnet_id = var.subnet_id_value
}
--------------------------------------------------------------------------------------------------------------------------------------
vaiables.tf file
--------------------------------------------------------------------------------------------------------------------------------------
variable "ami_value" {
    description = "value for the ami"
}

variable "instance_type_value" {
    description = "value for instance_type"
}

variable "subnet_id_value" {
    description = "value for the subnet_id"
}
--------------------------------------------------------------------------------------------------------------------------------------
output.tf file
--------------------------------------------------------------------------------------------------------------------------------------
output "public-ip-address" {
  value = aws_instance.example.public_ip
}
--------------------------------------------------------------------------------------------------------------------------------------

### we can create folder is MODULES ### inside folder create main.tf ###
terraform-project/
‚îÇ‚îÄ‚îÄ main.tf
‚îÇ‚îÄ‚îÄ variables.tf
‚îÇ‚îÄ‚îÄ outputs.tf
‚îÇ‚îÄ‚îÄ terraform.tfvars
‚îÇ‚îÄ‚îÄ modules/
‚îÇ   ‚îî‚îÄ‚îÄ ec2-instance/
‚îÇ       ‚îú‚îÄ‚îÄ main.tf 
‚îÇ       ‚îú‚îÄ‚îÄ variables.tf
‚îÇ       ‚îú‚îÄ‚îÄ outputs.tf
‚îÇ‚îÄ‚îÄ main.tf (modules path and pass values)

--------------------------------------------------------------------------------------------------------------------------------------
main.tf file (outside module folder)
--------------------------------------------------------------------------------------------------------------------------------------
provider "aws" {
  region = "us-east-1"
}

module "ec2_instance" {
  source = "./modules/ec2_instance"
  ami_value = "ami-053b0d53c279acc90" # replace this
  instance_type_value = "t2.micro"
  subnet_id_value = "subnet-019ea91ed9b5252e7". # replace this
}
--------------------------------------------------------------------------------------------------------------------------------------

### What is Terraform?
Ans.Terraform is an open-source Infrastructure as Code (IaC) tool developed by HashiCorp Language,
    thats allows to define and provision infrastructure using a declarative configuration language.

### How does Terraform work?
Ans.Terraform follows a lifecycle approach with these key steps:
1. Write: Define infrastructure using HCL.
2. Init: Initialize Terraform to download providers.
3. Plan: Preview changes before applying them.
4. Apply: Deploy infrastructure.
5. Destroy: Remove infrastructure when no longer needed.

### What are Terraform Providers?
Ans.Terraform Providers are plugins that enable Terraform to interact with APIs of various services like
    (AWS, Azure, GCP, etc,).

### What is Terraform State file and why is it important?
Ans.Terraform state files keeps track of infrastructure resources to map real-world resources with the configuration files.
1. Stored in (terraform.tfstate)
2. Supports remote state storage (S3,etc.)

### How do you manage Terraform state in a team?
Ans.Use Remote State (e.g., S3 with DynamoDB locking, Terraform Cloud)
    Enable State Locking to avoid multiple users modifying state simultaneously.
Example for S3 backend:
-----------------------------------------------------------------------------------------------------------------------
terraform {
  backend "s3" {
    bucket         = "my-terraform-state"
    key            = "infra/terraform.tfstate"
    region         = "us-east-1"
    dynamodb_table = "terraform-lock"
  }
}
-----------------------------------------------------------------------------------------------------------------------
### What is a Terraform Module?
Ans.Terraform modules are reusable configuration units that encapsulate related resources.
Example module structure:
-----------------------------------------------------------------------------------------------------------------------
terraform-project/
‚îÇ‚îÄ‚îÄ main.tf
‚îÇ‚îÄ‚îÄ variables.tf
‚îÇ‚îÄ‚îÄ outputs.tf
‚îÇ‚îÄ‚îÄ terraform.tfvars
‚îÇ‚îÄ‚îÄ modules/
‚îÇ   ‚îî‚îÄ‚îÄ ec2-instance/
‚îÇ       ‚îú‚îÄ‚îÄ main.tf 
‚îÇ       ‚îú‚îÄ‚îÄ variables.tf
‚îÇ       ‚îú‚îÄ‚îÄ outputs.tf
‚îÇ‚îÄ‚îÄ main.tf (modules path and pass values)
-----------------------------------------------------------------------------------------------------------------------
### What are Terraform Variables and Outputs?
Ans.Variables in terraform are used to parameterize configurations,it making them dynamic and reusable.

### What are Provisioners in Terraform?
Ans.Provisioners in Terraform are used to execute scripts or commands on a resource,
    after it is created or before it is destroyed.
Types of Provisioners in Terraform:
1. Local-exec: Executes commands on the machine running Terraform.
2. Remote-exec: Runs commands on the remote resource (like an EC2 instance).
3. File: Transfers files from the local system to a remote resource.

### What are Terraform Workspaces?
Ans.Terraform workspaces provide a way to manage multiple environments (e.g., dev, staging, prod),
    using the same Terraform configuration.
-->Each workspace has its own state file, 
    allowing isolated infrastructure setups without maintaining separate directories.
    (No need to maintain separate folders for dev, staging, and prod).














