### What is Kubernetes?
Ans.Kubernetes  is an open-source container orchestration platform,
    that automates the deployment, scaling, and management of containerized applications.
    It was originally developed by "Google" and is now maintained by the "Cloud Native Computing Foundation(CNCF)".


### Explain of Arcitecture in K8s?
Ans.Kubernetes (K8s) follows a Master Node-Worker Node architecture :- 
    Master Node ntg but "Control Plane" manages the Clusters and Orchestrates operations.
    +---------------------------+
    ### Master Nodes components :-
    +---------------------------+
    1. API Server (kube-apiserver) ---> "Acts as the entry point for all Kubernetes operations (REST API)".
    2. etcd (Database) ---> "A key-values store that holds all cluster data (state, configuration, etc)".
    3. Scheduler (kube-scheduler) ---> "Assigns pods to worker nodes based on available resources and policies".
    4. Controller-Manager ---> "The Controller Manager continuously monitors and maintains the desired state".

    Worker Node that run containerized applications.
    +---------------------------+
    ### Worker Nodes components :-
    +---------------------------+
    1. Kubelet ---> "The Kubelet on that Worker Node communicates with the API Server to ensure the Pod is running".
    2. Kube Proxy ---> "Kube Proxy ensures networking and allows communication between Pods and Services".
    3. Container Runtime ---> "The Container Runtime starts the container(s) inside the Pod".
    4. Pods (containers inside) ---> "A group of one or more containers running instances of an application".


### What is a Pod in Kubernetes?
Ans.Pod is the smallest and simplest deployable unit in Kubernetes, 
    It represents one or more containers that share the same network and storage.


### What is the difference between a Docker Container and a Kubernetes Pod?
Ans.
+----------------------+----------------------------+--------------------------------+
| 🔹Features           | 🔹Docker Container         | 🔹Kubernetes Pod               |
+----------------------+----------------------------+--------------------------------+
| **Basic Unit**       | A single container.        | A group of one or more         |
|                      |                            | containers.                    |
+----------------------+----------------------------+--------------------------------+
| **Networking**       | Each container has its     | All containers in a pod        |
|                      | own isolated network.      | share the same IP.             |
+----------------------+----------------------------+--------------------------------+
| **Storage**          | Uses Docker volumes        | Shares storage between         |
|                      | (isolated to each          | containers in the pod.         |
|                      | container).                |                                |
+----------------------+----------------------------+--------------------------------+
| **Orchestration**    | Requires manual            | Managed automatically by       |
|                      | orchestration or Docker    | Kubernetes.                    |
|                      | Swarm.                     |                                |
+----------------------+----------------------------+--------------------------------+
| **Scaling**          | Must be manually managed   | Scales automatically with      |
|                      | or done via Docker Swarm.  | Kubernetes Deployments.        |
+----------------------+----------------------------+--------------------------------+
| **Self-Healing**     | Containers don’t restart   | Kubernetes restarts failed     |
|                      | automatically on failure.  | pods automatically.            |
+----------------------+----------------------------+--------------------------------+


### What is a Kubernetes Service?
Ans.A Kubernetes Service is a logical abstraction that ensures stable networking for a group of Pods.
    Since Pods are ephemeral and their IP addresses change dynamically,
    a Service provides a fixed IP address and DNS name to ensure continuous connectivity.
    +-------------------------------------+
    2️⃣ Networking & Service Discovery 🌐:-
    +-------------------------------------+
    1.ClusterIP ---> Exposes a service within the cluster with a stable internal IP address.."(Default Service Type)".

    2.NodePort  ---> Exposes a service on a static port on each Node in the Cluster.

    3.LoadBalancer ---> Exposes a service externally with a public IP, Uses a cloud load balancer."(AWS)".

    4.Ingress  ----> Manages external access using HTTP/HTTPS routes with path-based routing.

    5.NetworkPolicy --> Controls how pods communicate with each other and external services.

+-------------------+------------------------+--------------------------------------+
| 🔹Feature        | 🔹Load Balancer                    | 🔹Ingress                 |
+-------------------+------------------------+--------------------------------------+
| Network Layer    | Layer 4 (TCP/UDP)                  | Layer 7 (HTTP/HTTPS)      |
+-------------------+------------------------+--------------------------------------+
| External IP      | Each service gets its own IP       | Multiple services share   |
|                  |                                    |     a single IP           |  
+-------------------+------------------------+--------------------------------------+
| Traffic Routing  | Direct to service                  | Path/Host-based rules     |
+-------------------+------------------------+--------------------------------------+
| Cost             | High (one LB per svc)              | Lower (shared LB)         |
+-------------------+------------------------+--------------------------------------+
| Flexibility      | Limited routing options            | Advanced routing          |
+-------------------+------------------------+--------------------------------------+
| Use Case         | Exposing a single service directly | Managing multiple services|
|                  |                                    | under one entry point     |
+-------------------+------------------------+--------------------------------------+


### What are Kubernetes Labels and Selectors?
Ans.Labels: Labels in Kubernetes are key-value pairs assigned to objects like Pods, Services, Deployments, and Nodes.
    Selectors: Label selectors are used to filter and select Kubernetes objects based on their labels.



### Explain the difference between a Deployment and a ReplicaSet in Kubernetes?
Ans.
+----------------------+-----------------------------------+----------------------------------+
|  🔹Feature           |  🔹Deployment                     |  🔹ReplicaSet                    |
+----------------------+-----------------------------------+----------------------------------+
| **Purpose**          | Manages ReplicaSets and updates.  | Ensures a fixed number of pods   |
|                      |                                   | are running.                     |
+----------------------+-----------------------------------+----------------------------------+
| **Rolling Updates**  | ✅ Supports rolling updates.      | ❌ Not supported.               |
+----------------------+-----------------------------------+----------------------------------+
| **Rollback**         | ✅ Can rollback to previous       | ❌ No rollback support.         |
|                      | versions.                         |                                  |
+----------------------+-----------------------------------+----------------------------------+
| **Scaling**          | ✅ Supports auto/manual scaling.  | ✅ Supports scaling but no      |
|                      |                                   | version management.              |
+----------------------+-----------------------------------+----------------------------------+
| **Self-Healing**     | ✅ Recreates failed pods.         | ✅ Recreates failed pods.       |
+----------------------+-----------------------------------+----------------------------------+
| **Use Case**         | Ideal for long-running apps.      | Used when only replica count     |
|                      |                                   | matters, no updates needed.      |
+----------------------+----------------------------------+-----------------------------------+


### Explain the difference between a Deployment and a StatefulSets in Kubernetes?
Ans.
┌─────────────────┬─────────────────────────────────────────────────────────┬────────────────────────────────────────────────────────┐
│ **🔹Feature**   │ 🔹Deployment                                            │ 🔹StatefulSet                                          │
├─────────────────┼─────────────────────────────────────────────────────────┼────────────────────────────────────────────────────────│
│ **Purpose**     │ Used for **stateless applications** like web servers,   │ Used for **stateful applications** that require        │
│                 │ APIs, or microservices.                                 │ persistent storage, stable network identities, and     │
│                 │                                                         │ ordered deployments (e.g., databases, message queues). |
├─────────────────┼─────────────────────────────────────────────────────────┼────────────────────────────────────────────────────────┤
│ **Pod Identity**│ Pods are **interchangeable** with **no stable identity**│ Pods have **unique, stable names** (e.g., `myapp-0`)   │
│                 │ and no guaranteed network identity.                     │ which persist across restarts.                         │
├─────────────────┼─────────────────────────────────────────────────────────┼────────────────────────────────────────────────────────┤
│ **Scaling**     │ Pods are scaled **in parallel**, without any specific   │ Pods are scaled **one at a time** in a specific order  │
│                 │ order.                                                  │ (e.g., `myapp-0` before `myapp-1`).                    │
├─────────────────┼─────────────────────────────────────────────────────────┼────────────────────────────────────────────────────────┤
│ **Storage**     │ Typically does not use persistent storage, or uses      │ Each pod is associated with its own **persistent       │
│                 │ shared storage.                                         │ storage** (via PersistentVolumeClaims), ensuring       │
│                 │                                                         │ data persists across pod restarts.                     │
├─────────────────┼─────────────────────────────────────────────────────────┼────────────────────────────────────────────────────────┤
│ **Use Cases**   │ Ideal for **stateless applications** like web services  │ Ideal for **stateful applications** like databases     │
│                 │ and microservices that don’t require a stable identity  │ (e.g., MySQL, MongoDB) or messaging systems (e.g.,     │
│                 │ or persistent storage.                                  │ Kafka) where data must persist across restarts.        │
├─────────────────┼─────────────────────────────────────────────────────────┼────────────────────────────────────────────────────────┤
│ **Networking**  │ No stable DNS records, all pods have the same network   │ Each pod has a **unique DNS record**                   │ 
│                 │                                                         │ (e.g., `myapp-0.myapp-headless.svc.cluster.local`)     │
│                 │ identity.                                               │                                                        │
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤



### Concepts of Kubernetes (K8s) Resources 🚀:-

🔹 How These Kubernetes Resources Work Together:
1️⃣ A Deployment creates Pods that run containers.
2️⃣ A Service exposes Pods for internal/external access.
3️⃣ Ingress routes traffic from the internet to Services.
4️⃣ ConfigMaps & Secrets store configurations and credentials.
5️⃣ PersistentVolumes provide storage for applications.
6️⃣ Network Policies enforce security between Pods.


+-----------------------------------------------------------------------------------------------------------------------+
1️⃣ Workload Resources (Managing Applications) 🏗 
+-----------------------------------------------------------------------------------------------------------------------+
1.POD 🟢 ---> Pod is the smallest and simplest deployable unit in Kubernetes, it is a represents one or more containers.

2.Deployment 🔄 --->  It can Manages ReplicaSets and updates.

3.ReplicaSet 🔢 ---> Ensures a fixed number of pods are running.

4.StatefulSet 🔗 ---> Used for stateful applications (e.g., databases), providing stable pod identities.

5.DaemonSet 🛠 ---> Ensures that a copy of a pod runs on every node (useful for logging or monitoring agents).

6.Job ⏳ ---> Runs a task once until completion.

7.CronJob ⏰ ---> Schedules Jobs to run at specific times (like a cron task).

+-----------------------------------------------------------------------------------------------------------------------+
3️⃣ Storage Management 💾
+-----------------------------------------------------------------------------------------------------------------------+
┌──────────────────────────┬──────────────────────────────────────────────────────┐
│ **PersistentVolume**     │ - Represents physical storage in the cluster.        │
│   (PV)                   │ - Can be manually provisioned or dynamically created.│
│                          │ - Abstracts underlying storage systems (e.g., NFS, EBS)
│                          │ - Managed by admins.                                 │
├──────────────────────────┼──────────────────────────────────────────────────────┤
│ **PersistentVolumeClaim**│ - A user’s request for storage resources.            │
│   (PVC)                  │ - Can be created by pods or users.                   │
│                          │ - Specifies desired storage size, access mode, etc.  │
│                          │ - Binds to a matching PV.                            │
├──────────────────────────┼──────────────────────────────────────────────────────┤
│ **Binding Process**      │ - PVC binds to a PV if its request matches PV's      │
│                          │   capacity and access modes.                         │
│                          │ - Pod mounts the PVC as a volume to access storage.  │
├──────────────────────────┼──────────────────────────────────────────────────────┤
│ **Access Modes**         │ - `ReadWriteOnce (RWO)`: Mounted by a single node.   │
│                          │ - `ReadOnlyMany (ROX)`: Mounted as read-only by many │
│                          │   nodes.                                             │
│                          │ - `ReadWriteMany (RWX)`: Mounted as read-write by    │
│                          │   many nodes.                                        │
├──────────────────────────┼──────────────────────────────────────────────────────┤
│ **Reclaim Policy**       │ - Defines the action on a PV after it's released:    │
│                          │   `Retain`, `Delete`, or `Recycle`.                  │
├──────────────────────────┼──────────────────────────────────────────────────────┤
│ **Dynamic Provisioning** │ - PVs can be automatically provisioned by Kubernetes │
│                          │   when a PVC is created, using a StorageClass.       │
│──────────────────────────│──────────────────────────────────────────────────────│
│  **StorageClass**        │  - Defines different storage types                   │
│                          │     (e.g., SSD, HDD, cloud storage).                 │
└──────────────────────────┴──────────────────────────────────────────────────────┘


+-----------------------------------------------------------------------------------------------------------------------+
4️⃣ Configuration & Secrets Management 🔑
+-----------------------------------------------------------------------------------------------------------------------+
1.ConfigMap 📜 ---> Stores non-sensitive configuration data in key-value format.

2.Secret 🔐 ---> Stores sensitive data like passwords, API keys securely.

+-----------------------------------------------------------------------------------------------------------------------+
5️⃣ RBAC (Role-Based Access Control) 🔑
+-----------------------------------------------------------------------------------------------------------------------+
1.ServiceAccount Role 👤 ---> A Role defines a set of permissions for resources (like Pods, Services, etc.) within a namespace.

2.RoleBinding 🔏 ---> Grants access based on a Role within a namespace.

3.ClusterRole  ---> Grants cluster-wide permissions like managing Nodes or Namespaces.

4.ClusterRoleBinding 🌎 ---> Grants access based on a ClusterRole across the cluster.
+-----------------------------------------------------------------------------------------------------------------------+
6️⃣ Cluster Resources & Node Management 🖥
+-----------------------------------------------------------------------------------------------------------------------+
1.Node 🏗 ---> Represents a worker machine in the cluster.

2.Namespace 🏷 ---> A Namespace in Kubernetes is a logical partition within a cluster, 
                    that allows multiple teams or applications to operate in isolation.

### Default Namespaces in Kubernetes ###
┌───────────────────┬─────────────────────────────────────────────────────┐
│ Namespace         │ Description                                         │
├───────────────────┼─────────────────────────────────────────────────────┤
│ default           │ The namespace where resources are created if no     │
│                   │ namespace is specified.                             │
├───────────────────┼─────────────────────────────────────────────────────┤
│ kube-system       │ Contains Kubernetes system components (API server,  │
│                   │ scheduler, controller manager, etc.).               │
├───────────────────┼─────────────────────────────────────────────────────┤
│ kube-public       │ Used for publicly accessible resources (mostly for  │
│                   │ cluster information).                               │
├───────────────────┼─────────────────────────────────────────────────────┤
│ kube-node-lease   │ Tracks node heartbeats to improve node failure      │
│                   │ detection.                                          │
└───────────────────┴─────────────────────────────────────────────────────┘

3.ResourceQuota 📊 ---> Limits resource usage within a namespace.

4.LimitRange 📏 ---> Defines min/max constraints on resource consumption per namespace.

+-----------------------------------------------------------------------------------------------------------------------+
7️⃣ Advanced & Miscellaneous Resources 🚀
+-----------------------------------------------------------------------------------------------------------------------+
1.HorizontalPodAutoscaler (HPA) ---> Automatically scales pods based on CPU/memory usage.

2.VerticalPodAutoscaler (VPA) ---> Adjusts resource requests/limits of pods automatically.

3.CustomResourceDefinition (CRD) ---> Allows users to define their own Kubernetes resources.

4.Operator ---> Automates the management of complex applications (built using CRDs)..






















