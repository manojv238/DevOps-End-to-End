### What is Kubernetes?
Ans.Kubernetes  is an open-source container orchestration platform,
    that automates the deployment, scaling, and management of containerized applications.
    It was originally developed by "Google" and is now maintained by the "Cloud Native Computing Foundation(CNCF)".

### Explain of Arcitecture in K8s?
Ans.Kubernetes (K8s) follows a Master Node-Worker Node architecture :- 
    Master Node ntg but "Control Plane" manages the Clusters and Orchestrates operations.
    +---------------------------+
    ### Master Nodes components :-
    +---------------------------+
    1. API Server (kube-apiserver) ---> "Acts as the entry point for all Kubernetes operations (REST API)".
    2. etcd (Database) ---> "A key-values store that holds all cluster data (state, configuration, etc)".
    3. Scheduler (kube-scheduler) ---> "Assigns pods to worker nodes based on available resources and policies".
    4. Controller-Manager ---> "The Controller Manager continuously monitors and maintains the desired state".

    Worker Node that run containerized applications.
    +---------------------------+
    ### Worker Nodes components :-
    +---------------------------+
    1. Kubelet ---> "The Kubelet on that Worker Node communicates with the API Server to ensure the Pod is running".
    2. Kube Proxy ---> "Kube Proxy ensures networking and allows communication between Pods and Services".
    3. Container Runtime ---> "The Container Runtime starts the container(s) inside the Pod".
    4. Pods (containers inside) ---> "A group of one or more containers running instances of an application".

### What is a Pod in Kubernetes?
Ans.Pod is the smallest and simplest deployable unit in Kubernetes, 
    It represents one or more containers that share the same network and storage.

### What is the difference between a Docker Container and a Kubernetes Pod?
Ans.
+----------------------+----------------------------+--------------------------------+
| 🔹Features           | 🔹Docker Container         | 🔹Kubernetes Pod               |
+----------------------+----------------------------+--------------------------------+
| **Basic Unit**       | A single container.        | A group of one or more         |
|                      |                            | containers.                    |
+----------------------+----------------------------+--------------------------------+
| **Networking**       | Each container has its     | All containers in a pod        |
|                      | own isolated network.      | share the same IP.             |
+----------------------+----------------------------+--------------------------------+
| **Storage**          | Uses Docker volumes        | Shares storage between         |
|                      | (isolated to each          | containers in the pod.         |
|                      | container).                |                                |
+----------------------+----------------------------+--------------------------------+
| **Orchestration**    | Requires manual            | Managed automatically by       |
|                      | orchestration or Docker    | Kubernetes.                    |
|                      | Swarm.                     |                                |
+----------------------+----------------------------+--------------------------------+
| **Scaling**          | Must be manually managed   | Scales automatically with      |
|                      | or done via Docker Swarm.  | Kubernetes Deployments.        |
+----------------------+----------------------------+--------------------------------+
| **Self-Healing**     | Containers don’t restart   | Kubernetes restarts failed     |
|                      | automatically on failure.  | pods automatically.            |
+----------------------+----------------------------+--------------------------------+

### What is a Kubernetes Service?
Ans.A Kubernetes Service is a logical abstraction that ensures stable networking for a group of Pods.
    Since Pods are ephemeral and their IP addresses change dynamically,
    a Service provides a fixed IP address and DNS name to ensure continuous connectivity.
    +-----------------------+
    🔹Types of Services:-
    +-----------------------+
    1.ClusterIP ---> Exposes a service within the cluster with a stable internal IP address.."(Default Service Type)".
    2.NodePort  ---> Exposes a service on a static port on each Node in the Cluster.
    3.LoadBalancer ---> Exposes a service externally with a public IP, Uses a cloud load balancer."(AWS)".
    4.ExternalName ---> Maps a Service to an external DNS name.

### Explain the difference between a Deployment and a ReplicaSet in Kubernetes?
Ans.
+----------------------+-----------------------------------+----------------------------------+
|  🔹Feature           |  🔹Deployment                     |  🔹ReplicaSet                    |
+----------------------+-----------------------------------+----------------------------------+
| **Purpose**          | Manages ReplicaSets and updates.  | Ensures a fixed number of pods.  |
+----------------------+-----------------------------------+----------------------------------+
| **Rolling Updates**  | ✅ Supports rolling updates.      | ❌ Not supported.               |
+----------------------+-----------------------------------+----------------------------------+
| **Rollback**         | ✅ Can rollback to previous       | ❌ No rollback support.         |
|                      | versions.                         |                                  |
+----------------------+-----------------------------------+----------------------------------+
| **Scaling**          | ✅ Supports auto/manual scaling.  | ✅ Supports scaling but no      |
|                      |                                   | version management.              |
+----------------------+-----------------------------------+----------------------------------+
| **Self-Healing**     | ✅ Recreates failed pods.         | ✅ Recreates failed pods.       |
+----------------------+-----------------------------------+----------------------------------+
| **Use Case**         | Ideal for long-running apps.      | Used when only replica count     |
|                      |                                   | matters, no updates needed.      |
+----------------------+----------------------------------+-----------------------------------+

### What are Kubernetes Labels and Selectors?
Ans.Labels: Labels in Kubernetes are key-value pairs assigned to objects like Pods, Services, Deployments, and Nodes.
    Selectors: Label selectors are used to filter and select Kubernetes objects based on their labels.






