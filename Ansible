######################################################### Ansible Ad-Hoc Commands ################################################################
1. Test Connectivity (Ping All Hosts)
🔹 Uses the ping module to check if hosts are reachable: [ansible all -m ping -i inventory.ini]

2. Execute Shell Commands on Remote Hosts
🔹 Runs a shell command on all hosts: [ansible all -m command -a "uptime"]  ("M" MODULE && "A" ARGUMENTS)
🔹 Use shell instead of command when you need pipes or redirections: [ansible all -m shell -a "echo Hello > /tmp/testfile.txt"]

3. Manage Users
🔹 Create a new user: [ansible all -m user -a "name=john state=present"]
🔹 Delete a user: [ansible all -m user -a "name=john state=absent"]

4. Manage Services
🔹 Start a service: [ansible all -m service -a "name=nginx state=started"]
🔹 Restart a service: [ansible all -m service -a "name=nginx state=restarted"]
🔹 Stop a service: [ansible all -m service -a "name=nginx state=stopped"]

5. Install or Remove Packages
🔹 For Ubuntu/Debian: [ansible all -m apt -a "name=nginx state=present"]
🔹 For RHEL/CentOS: [ansible all -m yum -a "name=nginx state=present"]
🔹 To uninstall a package: [ansible all -m apt -a "name=nginx state=absent"]

6. Copy Files to Remote Hosts
🔹 Copy files to remote hosts: [ansible all -m copy -a "src=/local/file.txt dest=/remote/path/file.txt"]
🔹 Copy a file with specific permissions: [ansible all -m copy -a "src=/local/file.txt dest=/remote/path/file.txt mode=0644"]

7. Fetch Files from Remote Hosts
🔹 This copies /remote/path/file.txt from all hosts to the control node: [ansible all -m fetch -a "src=/remote/path/file.txt dest=/local/path/"]

8. Change File Permissions
🔹 Change ownership: [ansible all -m file -a "path=/remote/path/file.txt owner=root group=root"]
🔹 Change permissions: [ansible all -m file -a "path=/remote/path/file.txt mode=0755"]

9. Reboot Remote Machines
🔹 Useful after kernel updates or system maintenance: [ansible all -m reboot]

10. Gather System Facts
🔹 This collects detailed system information like OS, CPU, memory, and network details: [ansible all -m setup]
####################################################################################################################################################
### What is Ansible ?
Ans.Ansible is an open-source automation tool used for configuration management, infrastructure provisioning, 
    application deployment and orchestration by using YAML-based playbooks.
    It works by connecting to remote machines via SSH (Linux) or WinRM (Windows),
    executing tasks without requiring agents.


### What are the key features of Ansible?
Ans.
📌 Agentless – No need to install agents on managed nodes.
📌 Simple YAML Syntax – Uses human-readable YAML for playbooks.
📌 Idempotency – Ensures changes apply only when needed.
📌 Scalability – Manages thousands of servers efficiently.
📌 Pre-built Modules – Extensive library for automation tasks.
📌 Orchestration – Automates multi-tier app deployments.
📌 Secure & Reliable – Uses SSH and Ansible Vault for security.
📌 Push Model Execution – Executes tasks from the control node directly.


### Difference Between Ansible, Shell, and Python?
Ans.
📌 Shell (Bash/PowerShell):
✅ Good for one-time execution for shell script but lacks of scalability for complex automation.
🔹 Example: Shell is wont work with different OS.(linux,ubuntu,windows).

📌 Python:
✅ More flexible than Shell, supports both Linux and Windows.
🔹 Example: Writing a script to manage multiple services dynamically.

📌 Ansible:
✅ Best for managing multiple VMs with different OS types.
✅ Uses inventory files to define different hosts and apply the right module automatically.
🔹 Example: Write a Playbook, configure, and start Nginx on multiple servers.

📌📌📌 Final Recommendation:
✅ If it's a one-time task, use Shell scripts.
✅ If you want custom logic & flexibility, use Python.
✅ If you need scalability, reusability, and automation, Ansible is the best choice.


### What is Ansible Inventory?
Ans.Ansible inventory is a file or source that contains information about managed hosts (nodes),where Ansible will execute tasks.
It defines groups of hosts and their connection details, such as IP addresses, SSH users, and authentication methods.
--------------------------------------------------------
📌 Types of Ansible Inventory:
--------------------------------------------------------
1. Static Inventory (Default: /etc/ansible/hosts):-
✅ A simple file with manually defined hosts and groups.
🔹 Example (inventory.ini): "ini-Extention"
--------------------------------------------------------
[web]
web1 ansible_host=192.168.1.10 ansible_user=ubuntu
web2 ansible_host=192.168.1.11 ansible_user=ubuntu

[db]
db1 ansible_host=192.168.1.20 ansible_user=root
--------------------------------------------------------
✅ Run an ad-hoc command to check connectivity:
---> ansible all -m ping -i inventory.ini

2. Dynamic Inventory (For Cloud Environments: AWS, Azure, GCP, etc.):-
✅ Automatically fetches hosts from cloud providers.
🔹 Example (AWS EC2 dynamic inventory):
---> ansible-inventory -i aws_ec2.yml --list
✅ Uses scripts or plugins to dynamically pull instance details.


### Difference Between Ansible Ad-Hoc Commands and Playbooks?
Ans.
1. Ad-Hoc Commands are One-time commands and used for simple tasks on managed nodes.
   They are primarily used for tasks like checking connectivity, managing services, and installing packages.
   Use Case: Restarting a service, checking uptime, or running a quick shell command.

2. Ansible Playbooks are YAML-based automation scripts that define a set of tasks to be executed on managed nodes.
   Playbooks are reusable, structured, and support advanced features like loops, conditions, and handlers
   Use Case: Automating infrastructure setup, application deployments, and configuration management.

🔹 Basic Structure of an Ansible Playbook
A playbook consists of the following key components:
---------------------------------------------------------------------------------------------------
Component   |	Description
---------------------------------------------------------------------------------------------------
hosts	   ---> Defines target machines (groups or individual servers).
become     --->	Runs tasks with elevated privileges (sudo).
tasks	   ---> Defines the actions to be performed.
handlers   --->	Executes tasks only when notified (e.g., restart a service after configuration changes).
vars	   ---> Stores variables for reuse.
roles	   ---> Reusable task sets for modular automation.
-----------------------------------------------------------------------------------------------------
🔹 Example 1: A Simple Ansible Playbook:
---
- name: Install and Configure Nginx
  hosts: web_servers    # Target hosts from the inventory
  become: yes          # Run as sudo (root privileges)

  tasks:
    - name: Install Nginx
      package:
        name: nginx
        state: present

    - name: Start and Enable Nginx
      service:
        name: nginx
        state: started
        enabled: yes
-------------------------------------------------------------------------------------------------------

### What is an Ansible Module?
Ans.Ansible modules are pre-built scripts and can be used in playbooks or ad-hoc commands to automate tasks,
    like system configuration, cloud provisioning, Kubernetes deployments, and CI/CD pipelines.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔹 Types of Ansible Modules (With Examples)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📌 1. System Modules
➤ user, service, cron, hostname
✅ Example: Create a user
---
- name: Create a new user
  user:
    name: devops_user
    state: present
    groups: sudo
------------------------------------------
📌 2. Package Modules
➤ apt, yum, dnf, pip
✅ Example: Install Nginx
---
- name: Install Nginx on Ubuntu
  apt:
    name: nginx
    state: present
-----------------------------------------
📌 3. File Modules
➤ file, copy, template, fetch
✅ Example: Copy a configuration file
---
- name: Copy a file
  copy:
    src: /home/user/config.conf
    dest: /etc/config.conf
    mode: '0644'
----------------------------------------
📌 4. Cloud Modules
➤ ec2_instance, gcp_compute_instance, azure_rm_virtualmachine
✅ Example: Launch an EC2 instance
---
- name: Launch EC2 instance
  amazon.aws.ec2_instance:
    name: my-instance
    state: running
    instance_type: t2.micro
    image_id: ami-12345678
---------------------------------------
📌 5. Networking Modules
➤ ios_config, firewalld, iptables
✅ Example: Enable HTTP in Firewalld
---
- name: Allow HTTP traffic
  firewalld:
    service: http
    state: enabled
    permanent: yes
    immediate: yes
-------------------------------------
📌 6. Kubernetes Modules
➤ k8s, helm
✅ Example: Deploy an Nginx Pod
---
- name: Deploy Nginx Pod in Kubernetes
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Pod
      metadata:
        name: nginx-pod
      spec:
        containers:
          - name: nginx
            image: nginx:latest
-----------------------------------------
📌 7. CI/CD & DevOps Modules
➤ git, docker_container, jenkins_job
✅ Example: Run an Nginx container
---
- name: Run Nginx container
  docker_container:
    name: nginx
    image: nginx:latest
    state: started
    ports:
      - "80:80"
----------------------------------------

### What is an Ansible Role?
Ans.An Ansible Role is a way to organize automation tasks logically and modularly.
    Roles structure playbooks into reusable components, making automation scalable, maintainable, reusable across different projects.
🔹 Role Directory Structure
When you create an Ansible role, it follows this default directory structure:

my_role/
│── tasks/           # Main tasks for the role
│   ├── main.yml     # Entry point for tasks
│── handlers/        # Handlers (triggered by tasks)
│── templates/       # Jinja2 templates (dynamic config files)
│── files/           # Static files (e.g., scripts, binaries)
│── vars/            # Variables specific to the role
│── defaults/        # Default variables (lower precedence)
│── meta/            # Role metadata (dependencies, author info)
│── tests/           # Test cases for the role
│── README.md        # Documentation for the role














