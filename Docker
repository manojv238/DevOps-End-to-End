################ Docker Commands #################
docker images --> This command is used to list all the Docker images.

docker ps ------> This command is used to list all the running Docker containers.

docker ps -a ---> This command is used to know the details of all the running, stopped, or exited containers.

docker pull <image-name> -----> This command is used to download a Docker image from a registry.

docker build -t <image-name> -> This command is used to create a build Docker Image.

docker exec -it <container-ID> /bin/sh ---> This command is used for login enter into the container.

docker inspect container-ID> --> It will display of the container body details,[JSON Format].

docker run <image-name/id> ---> This command is used to start a new Docker container from an image.

docker run -d <image-name> ---> This command is used to run the container in the background instead,[detach].

docker stop <container-id> ---> This command is used to stop a running container.

docker run -d -p 8080:80 <image-name> ---> To mapping port numbers from docker containers.
["The syntax is as follows: -p host_port:container_port .
@For example, to map port 8080 on the host to port 80 inside the container, you can use -p 8080:80".] 

docker run -p 80:80 -d nginx -> This command is used to default NGINX configuration.

docker rmi <image-name> ------> This command is used to remove a Docker image.

docker rm <container-id> -----> This command is used to remove a Docker container.

docker rm $(docker ps -a -q) -> This command is ued to remove the all stopped containers are deleted.

docker tag shopfront(ImageName):latest(tag) manu9121(dockerhub-Username)/shopfront(registry):latest --->docker image push to dockerhub

docker push manu9121/shopfront:latest.



########### Dockerfiles ############
FROM ---> To pull the base image(docker-hub).

RUN ----> To execute linux commands.

COPY ----> To copy a directory from local machine to the docker container.

ADD -----> Zip files it will Unzip automatically and copy in the container.

CMD -----> Some commands to start the the jar files but,(Variables are Dynamically or pass values/argues changed). 

ENTRYPOINT ----> Some commands or scrpipts to start the jar files but, (Variables are fixed values or arguments).

WORKDIR -------> It sets the path of working directory.

ENV ----> It sets a environment variables.

EXPOSE -> It associates a specific port to enable networking between container and to the outside.....

MAINTAINER ----> It defines a full name and email address of the image creator.

USER ---> It sets the USERNAME which is to run the container.

VOLUME -> It is used to enable access from container to a directory on the host machine.

LABEL --> It allows to add a label to your docker image.



### Why using in Docker?
Ans.1.The Linux system environments mangement was becoming difficult if we are using jar files.
    2.The CPU in the Memory management inside the Linux system was becoming difficult for us to manage.
    3.The linux system cause coming high beacuse of the various of deployments right.
      --->"you do one day (10deploymens) and tmrw day (20deployments) 
      to support 30 deployments i need to increase my server of the linux systems" <---
    4.The jars which are there from one system to another system the commucation network bridge was becoming diffult.
    5.Security and Reliablity.


### What is Docker?
Ans.Docker is a open-source platform that automates the deployment of applications quickly within lightweight containers.

### What is a Docker container?
Ans.Docker container is a lightweight, executable package that contains everything needed to run an application.
    Docker containers are based on Docker Image & use Docker Engine to run the applications in isolated environments.

### What is the difference between a container and a virtual machine?
Ans.Docker containers share the host OS kernel and are more lightweight.
    VM's are include a full of OS and more require resources to run.

### What is a Docker image?
Ans.A Docker image is a read-only template used to create containers.
     It contains the application code, libraries, environment variables, and configuration files necessary for the application to run.

### How do you create a Docker image?
Ans.A Docker image is created using a Dockerfile, which contains a series of instructions to set up the environment.
    The command [docker build -t <image-name> .] is used to build an Docker image from the Dockerfile.

### What is a Dockerfile?
Ans.A Dockerfile is a text file that contains a set of instructions used to build a Docker image.
     It specifies the base image, adds files, installs dependencies, and configures the environment.

### What is Docker Hub and how is it used? 
Ans.Docker Hub is a cloud-based registry service that allows users to store, share, and distribute Docker images.
     It provides a central repository for both public and private images, making it easy to access and manage containerized applications.

### What are Docker volumes?
Ans.Docker volumes are a way to persist data generated by and used by Docker containers.
    Volumes are stored outside of the container filesystem.

### Where is the default Docker Volumes are stroed?
Ans.Volumes are stored in location [“/var/lib/docker/volume”].

### How do you create a Docker volume?
Ans.We can create a Docker volume using the command [docker volume create <docker-volume>].

### What is the purpose of Docker-compose tool?
Ans.Docker compose is a tool to define and run multi-container Docker appllicatons using a YAML file.

### What is Docker swarm?
Ans.Docker swarm is a native clustering tool for Docker that allows we can manage a cluster of Docker engines.

### What is Docker network?
Ans.Docker network allows containers to communicate with each other and with the host.

### How do you create a custom Docker network?
Ans.We can create a custom Docker network using the command [docker network create <docker-network].

### What are the different types of networks?
Ans.The main types are bridge(within the single host),host,overlay(with multi-containers communicate) and none networks.

### What is the role of a Docker Registry?
Ans.A Docker registry is a stroage and distributaion system for Docker images.

### Disadavantages of Docker that why we choose K8?
Ans.I was not able to provide better security of my application.
    Docker was not giving to multi-architecture format.
    The maintance of docker containers was difficult.
    There was no proper dashboard giving by docker to monitoring docker containers.
    No proper rollback
    No proper strategy deployment in docker.
    No auto scalling or auto healing.
    














